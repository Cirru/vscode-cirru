{
  "name": "Cirru",
  "scopeName": "source.cirru",
  "fileTypes": ["cirru"],
  "information_for_contributors": "Highlights syntax changes",
  "patterns": [{ "include": "#value" }],
  "repository": {
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end"
        }
      },
      "name": "string.quoted.double",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape"
        }
      ]
    },
    "comma": {
      "name": "keyword.operator",
      "match": "(?=(\\s|\\())(\\,)\\s",
      "captures": {
        "3": {
          "name": "keyword.control"
        }
      }
    },
    "dollar": {
      "match": "\\s(\\$)(?=\\s)",
      "captures": {
        "1": {
          "name": "keyword.control"
        }
      }
    },
    "number": {
      "match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
      "name": "constant.numeric"
    },
    "keyword": {
      "name": "keyword",
      "match": "(\\s*)\\:[^\\(\\)\\s]+"
    },
    "raw-str": {
      "name": "string.quoted",
      "match": "(\\s*)\\|[^\\(\\)\\s]+"
    },
    "parameter": {
      "name": "variable.parameter",
      "match": "[^\\(\\)\\s\\$]+"
    },
    "primative": {
      "name": "constant.language",
      "match": "true|false|nil"
    },
    "head": {
      "name": "keyword.other.fn",
      "match": "^\\s*[^\\(\\)\\s\\$]+"
    },
    "expression": {
      "begin": "(\\()",
      "beginCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "0": {
          "name": "keyword.control"
        }
      },
      "name": "expression.group",
      "patterns": [
        {
          "include": "#value"
        },
        {
          "match": "\\s(\\,)(?=\\s)",
          "captures": {
            "1": {
              "name": "keyword.control"
            }
          }
        },
        {
          "match": "\\?(\\$)(?=\\s)",
          "captures": {
            "1": {
              "name": "keyword.control"
            }
          }
        }
      ]
    },
    "space": {
      "match": "\\s+"
    },
    "value": {
      "patterns": [
        { "include": "#expression" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#dollar" },
        { "include": "#comma" },
        { "include": "#number" },
        { "include": "#keyword" },
        { "include": "#raw-str" },
        { "include": "#primative" },
        { "include": "#head" },
        { "include": "#parameter" }
      ]
    }
  }
}
